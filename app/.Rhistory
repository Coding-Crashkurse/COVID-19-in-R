## app.R ##
library(shiny)
library(shinydashboard)
library(tidyverse)
library(data.table)
library(openxlsx)
library(RCurl)
library(readr)
library(readxl)
library(lubridate)
library(ggplot2)
library(gganimate)
library(highcharter)
library(magrittr)
# Import data
# Confirmed
cases_global_link <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv" # auf Raw klicken
confirmed <- data.table::fread(cases_global_link)
confirmed <- confirmed %>%
select(-c(`Province/State`, Lat, Long)) %>%
group_by(`Country/Region`) %>%
summarise_all(list(sum))
confirmed$`Country/Region` <- countrycode::countrycode(df$`Country/Region`, origin = "country.name", destination = "iso3c")
confirmed <- df %>%
filter(!is.na(`Country/Region`))
colnames(confirmed)[1] <- "iso3"
confirmed_lag <- confirmed[2:ncol(confirmed)] %>%
t() %>%
as.data.frame() %>%
mutate_if(~is.numeric(.x), ~(.x - lag(.x, default = 0))) %>%
t() %>%
as.data.frame() %>%
setNames(colnames(confirmed)[2:ncol(confirmed)])
confirmed_lag$iso3 <- confirmed$iso3
confirmed_lag <- confirmed_lag %>%
select(iso3, everything())
# Deaths
deaths_global_link <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv" # auf Raw klicken
deaths <- data.table::fread(deaths_global_link)
deaths <- deaths %>%
select(-c(`Province/State`, Lat, Long)) %>%
group_by(`Country/Region`) %>%
summarise_all(list(sum))
deaths$`Country/Region` <- countrycode::countrycode(df$`Country/Region`, origin = "country.name", destination = "iso3c")
deaths <- df %>%
filter(!is.na(`Country/Region`))
colnames(deaths)[1] <- "iso3"
deaths_lag <- deaths[2:ncol(deaths)] %>%
t() %>%
as.data.frame() %>%
mutate_if(~is.numeric(.x), ~(.x - lag(.x, default = 0))) %>%
t() %>%
as.data.frame() %>%
setNames(colnames(deaths)[2:ncol(deaths)])
deaths_lag$iso3 <- deaths$iso3
deaths_lag <- deaths_lag %>%
select(iso3, everything())
## app.R ##
library(shiny)
library(shinydashboard)
library(tidyverse)
library(data.table)
library(openxlsx)
library(RCurl)
library(readr)
library(readxl)
library(lubridate)
library(ggplot2)
library(gganimate)
library(highcharter)
library(magrittr)
# Import data
# Confirmed
cases_global_link <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv" # auf Raw klicken
confirmed <- data.table::fread(cases_global_link)
confirmed <- confirmed %>%
select(-c(`Province/State`, Lat, Long)) %>%
group_by(`Country/Region`) %>%
summarise_all(list(sum))
confirmed$`Country/Region` <- countrycode::countrycode(df$`Country/Region`, origin = "country.name", destination = "iso3c")
confirmed <- df %>%
filter(!is.na(`Country/Region`))
colnames(confirmed)[1] <- "iso3"
confirmed_lag <- confirmed[2:ncol(confirmed)] %>%
t() %>%
as.data.frame() %>%
mutate_if(~is.numeric(.x), ~(.x - lag(.x, default = 0))) %>%
t() %>%
as.data.frame() %>%
setNames(colnames(confirmed)[2:ncol(confirmed)])
confirmed_lag$iso3 <- confirmed$iso3
confirmed_lag <- confirmed_lag %>%
select(iso3, everything())
# Deaths
deaths_global_link <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv" # auf Raw klicken
deaths <- data.table::fread(deaths_global_link)
deaths <- deaths %>%
select(-c(`Province/State`, Lat, Long)) %>%
group_by(`Country/Region`) %>%
summarise_all(list(sum))
deaths$`Country/Region` <- countrycode::countrycode(df$`Country/Region`, origin = "country.name", destination = "iso3c")
deaths <- df %>%
filter(!is.na(`Country/Region`))
colnames(deaths)[1] <- "iso3"
deaths_lag <- deaths[2:ncol(deaths)] %>%
t() %>%
as.data.frame() %>%
mutate_if(~is.numeric(.x), ~(.x - lag(.x, default = 0))) %>%
t() %>%
as.data.frame() %>%
setNames(colnames(deaths)[2:ncol(deaths)])
deaths_lag$iso3 <- deaths$iso3
deaths_lag <- deaths_lag %>%
select(iso3, everything())
# Population
pop_link <- "http://api.worldbank.org/v2/en/indicator/SP.POP.TOTL?downloadformat=excel"
tf = tempfile(fileext = ".xls")
curl::curl_download(pop_link, tf)
pop <- readxl::read_excel(tf, sheet = 1, skip = 2)
pop <- pop %>%
select(`Country Code`, `2019`) %>%
setNames(c("iso3", "pop"))
deaths$`Country/Region` <- countrycode::countrycode(df$`Country/Region`, origin = "country.name", destination = "iso3c")
deaths <- deaths %>%
select(-c(`Province/State`, Lat, Long)) %>%
group_by(`Country/Region`) %>%
summarise_all(list(sum))
# Deaths
deaths_global_link <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv" # auf Raw klicken
deaths <- data.table::fread(deaths_global_link)
deaths <- deaths %>%
select(-c(`Province/State`, Lat, Long)) %>%
group_by(`Country/Region`) %>%
summarise_all(list(sum))
deaths$`Country/Region` <- countrycode::countrycode(df$`Country/Region`, origin = "country.name", destination = "iso3c")
deaths <- data.table::fread(deaths_global_link)
deaths <- deaths %>%
select(-c(`Province/State`, Lat, Long)) %>%
group_by(`Country/Region`) %>%
summarise_all(list(sum))
deaths$`Country/Region` <- countrycode::countrycode(df$`Country/Region`, origin = "country.name", destination = "iso3c")
## app.R ##
library(shiny)
library(shinydashboard)
library(tidyverse)
library(data.table)
library(openxlsx)
library(RCurl)
library(readr)
library(readxl)
library(lubridate)
library(ggplot2)
library(gganimate)
library(highcharter)
library(magrittr)
# Import data
# Confirmed
cases_global_link <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv" # auf Raw klicken
confirmed <- data.table::fread(cases_global_link)
confirmed <- confirmed %>%
select(-c(`Province/State`, Lat, Long)) %>%
group_by(`Country/Region`) %>%
summarise_all(list(sum))
confirmed$`Country/Region` <- countrycode::countrycode(confirmed$`Country/Region`, origin = "country.name", destination = "iso3c")
confirmed <- df %>%
filter(!is.na(`Country/Region`))
colnames(confirmed)[1] <- "iso3"
confirmed_lag <- confirmed[2:ncol(confirmed)] %>%
t() %>%
as.data.frame() %>%
mutate_if(~is.numeric(.x), ~(.x - lag(.x, default = 0))) %>%
t() %>%
as.data.frame() %>%
setNames(colnames(confirmed)[2:ncol(confirmed)])
confirmed_lag$iso3 <- confirmed$iso3
confirmed_lag <- confirmed_lag %>%
select(iso3, everything())
# Deaths
deaths_global_link <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv" # auf Raw klicken
deaths <- data.table::fread(deaths_global_link)
deaths <- deaths %>%
select(-c(`Province/State`, Lat, Long)) %>%
group_by(`Country/Region`) %>%
summarise_all(list(sum))
deaths$`Country/Region` <- countrycode::countrycode(deaths$`Country/Region`, origin = "country.name", destination = "iso3c")
deaths <- df %>%
filter(!is.na(`Country/Region`))
colnames(deaths)[1] <- "iso3"
deaths_lag <- deaths[2:ncol(deaths)] %>%
t() %>%
as.data.frame() %>%
mutate_if(~is.numeric(.x), ~(.x - lag(.x, default = 0))) %>%
t() %>%
as.data.frame() %>%
setNames(colnames(deaths)[2:ncol(deaths)])
deaths_lag$iso3 <- deaths$iso3
deaths_lag <- deaths_lag %>%
select(iso3, everything())
# Population
pop_link <- "http://api.worldbank.org/v2/en/indicator/SP.POP.TOTL?downloadformat=excel"
tf = tempfile(fileext = ".xls")
curl::curl_download(pop_link, tf)
pop <- readxl::read_excel(tf, sheet = 1, skip = 2)
pop <- pop %>%
select(`Country Code`, `2019`) %>%
setNames(c("iso3", "pop"))
runApp()
runApp()
runApp()
merged <- merge(confirmed_lag, pop, by="iso3")
merged <- merge(confirmed_lag, pop, by="iso3")
relativedf <- merged %>%
mutate_if(~is.numeric(.x), ~(.x / pop) * 1000000) %>%
select(-pop)
merged <- merge(deaths_lag, pop, by="iso3")
relativedf <- merged %>%
mutate_if(~is.numeric(.x), ~(.x / pop) * 1000000) %>%
select(-pop)
df_long <- pivot_longer(relativedf, cols = colnames(relativedf)[2:ncol(relativedf)], names_to = "sm", values_to = "value") %>%
mutate(value = round(value, 4))
df_long
runApp()
runApp()
runApp()
View(confirmed)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
relative[[2]]
relative[2]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinycssloaders", dependencies = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
